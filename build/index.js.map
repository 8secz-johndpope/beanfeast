{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/app.js","webpack:///./src/bin/config.js","webpack:///./src/bin/www.js","webpack:///./src/controllers/cable.controller.js","webpack:///./src/controllers/pool.controller.js","webpack:///./src/db/database.js","webpack:///./src/db/models/cable.model.js","webpack:///./src/db/schemas/cable.schema.js","webpack:///./src/db/schemas/location.schema.js","webpack:///./src/routes/cable.routes.js","webpack:///./src/routes/index.js","webpack:///./src/routes/pool.routes.js","webpack:///./src/services/cable.services.js","webpack:///external \"cookie-parser\"","webpack:///external \"core-js/stable\"","webpack:///external \"debug\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"mongoose\"","webpack:///external \"morgan\"","webpack:///external \"regenerator-runtime/runtime\"","webpack:///external \"shortid\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/bin/www.js\");\n","import express from 'express';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\nimport indexRouter from './routes/index';\nimport cableRouter from './routes/cable.routes';\nimport poolRouter from './routes/pool.routes';\n// import placesRouter from './routes/places.routes';\nimport db from './db/database';\n\nconst app = express();\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use('/', indexRouter);\napp.use('/cable', cableRouter);\napp.use('/pool', poolRouter);\n// app.use('/places', placesRouter);\n\nexport default app;\n","import dotenv from 'dotenv';\n\ndotenv.config({ silent: process.env.NODE_ENV === 'production' });\n","import './config';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport http from 'http';\nimport app from '../app';\n\nconst debug = require('debug')('beanfeast:server');\n\nconst port = process.env.PORT || 3000;\napp.set('port', port);\n\nfunction onError(error) {\n\tif (error.syscall !== 'listen') {\n\t\tthrow error;\n\t}\n\n\tconst bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;\n\n\t// handle specific listen errors with friendly messages\n\tswitch (error.code) {\n\t\tcase 'EACCES':\n\t\t\tconsole.error(`${bind} requires elevated privileges`);\n\t\t\tprocess.exit(1);\n\t\t\tbreak;\n\t\tcase 'EADDRINUSE':\n\t\t\tconsole.error(`${bind} is already in use`);\n\t\t\tprocess.exit(1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow error;\n\t}\n}\n\nconst server = http.createServer(app);\n\nfunction onListening() {\n\tconst addr = server.address();\n\tconst bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;\n\tdebug(`Listening on ${bind}`);\n}\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n","import CableService from '../services/cable.services';\nimport PoolService from '../services/pool.services';\n\nconst newCable = async (req, res, next) => {\n\tconst {\n\t\tfromTime = Date.now,\n\t\ttoTime = Date.now,\n\t\tmaxPeople = Infinity,\n\t\tlatitude,\n\t\tlongitude,\n\t\tsessionId,\n\t} = req.params;\n\n\ttry {\n\t\tlet cable = await CableService.generateNewCable({\n\t\t\tfromTime,\n\t\t\ttoTime,\n\t\t\tmaxPeople,\n\t\t});\n\t\tconst poolEntry = await PoolService.addNewUser({\n\t\t\tlatitude,\n\t\t\tlongitude,\n\t\t\tsessionId,\n\t\t});\n\t\tif (poolEntry) cable = await CableService.incrementPoolSize({ cableId: cable._id });\n\t\treturn res\n\t\t\t.status(200)\n\t\t\t.json({ status: 200, data: cable, message: 'Cable created succesfully' });\n\t} catch (e) {\n\t\treturn res.status(400).json({ status: 400, message: e.message });\n\t}\n};\n\nconst updateCable = async (req, res, next) => {\n\tconst { cableId, fromTime = Date.now, toTime = Date.now, maxPeople = Infinity } = req.params;\n\n\ttry {\n\t\tconst cable = await CableService.updateCable({\n\t\t\tcableId,\n\t\t\tfromTime,\n\t\t\ttoTime,\n\t\t\tmaxPeople,\n\t\t});\n\t\treturn res\n\t\t\t.status(200)\n\t\t\t.json({ status: 200, data: cable, message: 'Cable updated succesfully' });\n\t} catch (e) {\n\t\treturn res.status(400).json({ status: 400, message: e.message });\n\t}\n};\n\nconst CableController = {\n\tnewCable,\n\tupdateCable,\n};\n\nexport default CableController;\n","const PoolController = {\n\tnewPool: () => {\n\t\tconsole.log('new pool');\n\t},\n\tupdatePool: () => {\n\t\tconsole.log('update pool');\n\t},\n};\n\nexport default PoolController;\n","import mongoose from 'mongoose';\n\nconst dbPath = process.env.DB_URL;\n\nmongoose.connect(dbPath, { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst db = mongoose.connection;\ndb.on('error', () => {\n\tconsole.log('> error occurred from the database');\n});\ndb.once('open', () => {\n\tconsole.log('> successfully opened the database');\n});\n\nexport default db;\n","import mongoose from 'mongoose';\nimport CableSchema from '../schemas/cable.schema';\n\nconst { model } = mongoose;\nconst Cable = model('Cable', CableSchema);\n\nexport default Cable;\n","import mongoose from 'mongoose';\nimport shortid from 'shortid';\nimport locationSchema from './location.schema';\n\nconst { Schema } = mongoose;\n\nconst CableSchema = new Schema(\n\t{\n\t\t_id: {\n\t\t\ttype: String,\n\t\t\tdefault: shortid.generate,\n\t\t},\n\t\tfromTime: {\n\t\t\ttype: Date,\n\t\t\tdefault: Date.now,\n\t\t},\n\t\ttoTime: {\n\t\t\ttype: Date,\n\t\t\tdefault: Date.now,\n\t\t},\n\t\tmaxPoolSize: {\n\t\t\ttype: Number,\n\t\t\tdefault: Infinity,\n\t\t},\n\t\tcurrPoolSize: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0,\n\t\t},\n\t\tcentroid: {\n\t\t\ttype: locationSchema,\n\t\t\trequired: true,\n\t\t},\n\t},\n\t{\n\t\ttimestamps: true,\n\t}\n);\n\nexport default CableSchema;\n","import mongoose from 'mongoose';\n\nconst { Schema } = mongoose;\n\nconst locationSchema = new Schema({\n\ttype: {\n\t\ttype: String,\n\t\tenum: ['Point'],\n\t\trequired: true,\n\t},\n\tcoordinates: {\n\t\ttype: [Number],\n\t\trequired: true,\n\t},\n});\n\nexport default locationSchema;\n","import { Router } from 'express';\nimport CableController from '../controllers/cable.controller';\n\nconst router = Router();\n\nrouter.post('/new', CableController.newCable);\nrouter.post('/update', CableController.updateCable);\n\nexport default router;\n","import { Router } from 'express';\n\nconst router = Router();\n\n/* GET home page. */\nrouter.get('/', (req, res, next) => {\n\tres.json({ title: 'Express is working' });\n});\n\nexport default router;\n","import { Router } from 'express';\nimport PoolController from '../controllers/pool.controller';\n\nconst router = Router();\n\nrouter.get('/new', PoolController.newPool);\nrouter.get('/update', PoolController.updatePool);\n\nexport default router;\n","import Cable from '../db/models/cable.model';\n\n// TODO: create transaction here\nconst generateNewCable = async (params, ...rest) => {\n\tconst { fromTime, toTime, maxPoolSize } = params;\n\n\ttry {\n\t\tconst newCable = await Cable({ fromTime, toTime, maxPoolSize });\n\t\tnewCable.save();\n\t\treturn newCable;\n\t} catch (e) {\n\t\t// Log Errors\n\t\tthrow Error(e);\n\t}\n};\n\nconst updateCable = async (params, ...rest) => {\n\tconst { cableId, fromTime, toTime, maxPoolSize } = params;\n\n\ttry {\n\t\tconst cable = await Cable.findById(cableId, 'maxPoolSize fromTime toTime');\n\t\tcable.maxPoolSize = maxPoolSize || cable.maxPoolSize;\n\t\tcable.fromTime = fromTime || cable.fromTime;\n\t\tcable.toTime = toTime || cable.toTime;\n\n\t\tcable.save();\n\t\treturn cable;\n\t} catch (e) {\n\t\tthrow Error(e);\n\t}\n};\n\nconst incrementPoolSize = async (params, ...rest) => {\n\tconst { cableId } = params;\n\ttry {\n\t\tconst cable = await Cable.findById(cableId, 'currPoolSize maxPoolSize');\n\t\tif (cable.currPoolSize === cable.maxPoolSize) {\n\t\t\tthrow 'Max Pool Size reached';\n\t\t} else {\n\t\t\tcable.currPoolSize += 1;\n\t\t\tcable.save();\n\t\t\treturn cable;\n\t\t}\n\t} catch (e) {\n\t\tthrow Error(e);\n\t}\n};\n\nconst CableService = {\n\tgenerateNewCable,\n\tupdateCable,\n\tincrementPoolSize,\n};\n\nexport default CableService;\n","module.exports = require(\"cookie-parser\");","module.exports = require(\"core-js/stable\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"regenerator-runtime/runtime\");","module.exports = require(\"shortid\");"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtDA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}